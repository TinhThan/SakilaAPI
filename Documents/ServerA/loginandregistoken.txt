using AutoMapper;
using MediatR;
using Microsoft.EntityFrameworkCore;
using SakilaAPI.Core.Contants;
using SakilaAPI.Core.CQRS.User.Command;
using SakilaAPI.Core.Exceptions;
using SakilaAPI.Core.Middlewares;
using SakilaAPI.Core.Models.User;
using System.Security.Claims;

namespace SakilaAPI.Core.CQRS.User.CommandHandler
{
    public class LoginCommandHandler : BaseHandler, IRequestHandler<LoginCommand, AccessTokenResponse>
    {
        public LoginCommandHandler(DataContext dataContext, IMapper mapper) : base(dataContext, mapper)
        {
        }

        public async Task<AccessTokenResponse> Handle(LoginCommand request, CancellationToken cancellationToken)
        {
            var password = HelperIdentity.HashPasswordSalt(request.LoginModel.Password);
            var userExists = await _dataContext.Users.FirstOrDefaultAsync(t => t.UserName == request.LoginModel.UserName
                                                && t.Password == password, cancellationToken);
            if (userExists == null)
            {
                throw new StatusSuccessException(StatusCodes.Status204NoContent, "Người dùng không tồn tại", request.LoginModel.UserName);
            }

            var claims = new List<Claim>()
            {
                new Claim(ClaimTypes.Name,userExists.UserName),
                new Claim(ClaimTypes.Role,userExists.Permission)
            };
            var refreshToken = userExists.RefreshToken = HelperIdentity.GenerateRefreshToken();
            userExists.RefreshTokenExpiryTime = DateTime.UtcNow.AddDays(CurrentOption.AuthenticationString.ExpiredRefreshToken);
            try
            {
                _dataContext.Users.Update(userExists);
                var resultUpdate = await _dataContext.SaveChangesAsync(cancellationToken);
                if (resultUpdate > 0)
                {
                    return new AccessTokenResponse() { AccessToken = HelperIdentity.GenerateToken(claims),
                        RefreshToken = refreshToken
                    };
                }
                throw new StatusServerErrorException(MessageSystem.LOGIN_FAIL);
            }
            catch (Exception ex)
            {
                throw new StatusServerErrorException(MessageSystem.LOGIN_FAIL, ex.Message);
            }
        }
    }
}

using AutoMapper;
using MediatR;
using Microsoft.EntityFrameworkCore;
using SakilaAPI.Core.Contants;
using SakilaAPI.Core.CQRS.User.Command;
using SakilaAPI.Core.Exceptions;
using SakilaAPI.Core.Middlewares;

namespace SakilaAPI.Core.CQRS.User.CommandHandler
{
    public class RefreshTokenCommandHandler : BaseHandler, IRequestHandler<RefreshTokenCommand, string>
    {
        public RefreshTokenCommandHandler(DataContext dataContext, IMapper mapper) : base(dataContext, mapper)
        {
        }

        public async Task<string> Handle(RefreshTokenCommand request, CancellationToken cancellationToken)
        {
            try
            {
                var pricipal = HelperIdentity.GetPrincipalFromExpiredToken(request.RefreshTokenModel.AccessToken);
                var userName = pricipal.Identity.Name;

                var userExists = await _dataContext.Users.FirstOrDefaultAsync(t => t.UserName == userName, cancellationToken);

                if (userExists == null)
                {
                    throw new StatusSuccessException(StatusCodes.Status204NoContent, "Người dùng không tồn tại", userName);
                }

                if (userExists.RefreshToken != request.RefreshTokenModel.RefreshToken)
                {
                    throw new StatusSuccessException(StatusCodes.Status401Unauthorized, MessageSystem.REFRESH_TOKEN_INVALID, userName);
                }

                if (userExists.RefreshTokenExpiryTime < DateTime.UtcNow)
                {
                    throw new StatusSuccessException(StatusCodes.Status401Unauthorized, MessageSystem.REFRESH_TOKEN_EXPIRED, userName);
                }

                var newAccessToken = HelperIdentity.GenerateToken(pricipal.Claims.ToList());
                return newAccessToken;
            }
            catch (Exception e)
            {
                if (e is CustomException)
                {
                    throw;
                }
                throw new StatusSuccessException(StatusCodes.Status401Unauthorized, MessageSystem.AUTH_AUTHENTICATED_ERROR, e.Message);
            }
        }
    }
}

using AutoMapper;
using MediatR;
using SakilaAPI.Core.Contants;
using SakilaAPI.Core.CQRS.User.Command;
using SakilaAPI.Core.Entities;
using SakilaAPI.Core.Exceptions;
using SakilaAPI.Core.Middlewares;

namespace SakilaAPI.Core.CQRS.User.CommandHandler
{
    public class RegisterCommandHandler : BaseHandler, IRequestHandler<RegisterCommand, string>
    {
        public RegisterCommandHandler(DataContext dataContext, IMapper mapper) : base(dataContext, mapper)
        {
        }

        public async Task<string> Handle(RegisterCommand request, CancellationToken cancellationToken)
        {
            var newUser = _mapper.Map<UserEntity>(request.RegisterModel);
            newUser.Password = HelperIdentity.HashPasswordSalt(request.RegisterModel.Password);
            newUser.LastUpdate = DateTime.UtcNow;

            try
            {
                await _dataContext.AddAsync(newUser, cancellationToken);
                var resultCreate = await _dataContext.SaveChangesAsync(cancellationToken);
                if (resultCreate > 0)
                {
                    return MessageSystem.ADD_SUCCESS;
                }
                throw new StatusServerErrorException(MessageSystem.ADD_FAIL);
            }
            catch (Exception ex)
            {
                throw new StatusServerErrorException(MessageSystem.ADD_FAIL, ex.Message);
            }
        }
    }
}


